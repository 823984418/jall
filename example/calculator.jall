# 这是注释
# 示例代码:四则计算器
# 下面是非终结符号声明

#"L()float"中,"L"是符号名称,括号中为需要的参数类型声明,比如"(float)"意味此符号前方必须有一个"float"的值待归约,"float"是符号类型结果
L()float
E()float
T()float
F()float
# 这个符号用于分割符号声明与定义
@language
# 下面是符号定义

# 如果标识符是上面已出现的语法符号,它将被视为一个非终结符号,否则,它将被视为一个终结符号
# ">"是移入动作,可以出现连续的>>
# "{show(2)float}"的归约动作,"show"是调用的方法,"2"是参数个数,"float"是归约返回值
# 最后以";"作为结束符,期间可以空行

L -> E eof > {show(2)float};

E -> E add > T {add(3)float};
E -> E sub > T {sub(3)float};
E -> T;

T -> T mut > F {mut(3)float};
T -> T div > F {div(3)float};
T -> T div > div > F {div(4)float};
T -> F;

F -> id > {value(1)float};
F -> lf > E rf > {set(3)float};

# 注意:左递归"A -> > A a;"将会导致异常,消左递归时递归符号前方不得有动作
# 注意:两个生成相同语言的递归产生式将会导致程序进入死循环,因为提左公因子的目标是找到能够区分两个产生式的不同Token
# 注意:在出现空产生式时,会优先选择非空产生式,直至失配,这可以解决部分二义性问题
